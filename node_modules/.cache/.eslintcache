[{"/home/dh/Repositorio/DanielHott.github.io/src/index.js":"1","/home/dh/Repositorio/DanielHott.github.io/src/App.js":"2","/home/dh/Repositorio/DanielHott.github.io/src/reportWebVitals.js":"3","/home/dh/Repositorio/DanielHott.github.io/src/components/main.js":"4","/home/dh/Repositorio/DanielHott.github.io/src/components/header.jsx":"5","/home/dh/Repositorio/DanielHott.github.io/src/components/footer.jsx":"6","/home/dh/Repositorio/DanielHott.github.io/src/components/game.jsx":"7"},{"size":538,"mtime":1638404093197,"results":"8","hashOfConfig":"9"},{"size":348,"mtime":1638404093197,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1635977363321,"results":"11","hashOfConfig":"9"},{"size":3375,"mtime":1638404093197,"results":"12","hashOfConfig":"9"},{"size":615,"mtime":1635979095162,"results":"13","hashOfConfig":"9"},{"size":341,"mtime":1638402259166,"results":"14","hashOfConfig":"9"},{"size":4393,"mtime":1638404093197,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mnhjut",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/home/dh/Repositorio/DanielHott.github.io/src/index.js",[],"/home/dh/Repositorio/DanielHott.github.io/src/App.js",[],"/home/dh/Repositorio/DanielHott.github.io/src/reportWebVitals.js",[],["32","33"],"/home/dh/Repositorio/DanielHott.github.io/src/components/main.js",[],"/home/dh/Repositorio/DanielHott.github.io/src/components/header.jsx",[],"/home/dh/Repositorio/DanielHott.github.io/src/components/footer.jsx",[],"/home/dh/Repositorio/DanielHott.github.io/src/components/game.jsx",["34"],"import React from 'react';\n\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      category: '',\n      question: '',\n      correct: '',\n      incorrectAnswers: [],\n      time: 30,\n      isDisabled: false,\n      assertions: 0,\n      questionNumber: 0,\n      isButtonVisible: false,\n    };\n\n    this.fetchApi = this.fetchApi.bind(this);\n    this.changeColor = this.changeColor.bind(this);\n    this.timer = this.timer.bind(this);\n    this.score = this.score.bind(this);\n    this.next = this.next.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchApi();\n    this.timer();\n  }\n\n  async fetchApi() {\n    const token = await fetch('https://opentdb.com/api_token.php?command=request')\n    .then((response) => response.json())\n    .then((tokenId) => tokenId.token);\n    const { questionNumber } = this.state;\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const data = await response.json();\n    const correct = data.results[questionNumber].correct_answer;\n    const incorrect = data.results[questionNumber].incorrect_answers;\n    incorrect.push(correct);\n    incorrect.sort();\n    const { category, question, difficulty } = data.results[questionNumber];\n    this.setState({\n      category,\n      question,\n      correct,\n      difficulty,\n      incorrectAnswers: [...incorrect],\n      renderGame: false,\n    });\n  }\n\n  changeColor() {\n    const wrongs = document.querySelectorAll('.wrong');\n    const correct = document.querySelector('.correct');\n    wrongs.forEach((element) => { element.style.border = '1px solid rgb(255, 0, 0)'; });\n    correct.style.border = '2px solid rgb(6, 240, 15)';\n    this.setState({ isButtonVisible: true });\n  }\n\n  timer() {\n    const { time } = this.state;\n    const mil = 1000;\n    if (time !== 0) {\n      setInterval(() => {\n        this.setState((prevState) => {\n          if (prevState.time > 0) {\n            return ({ time: prevState.time - 1 });\n          }\n        });\n      }, mil);\n    }\n  }\n\n  score() {\n    const { assertions } = this.state;\n    const actAssertion = assertions + 1;\n    this.setState({ assertions: actAssertion });\n}\n\n  next() {\n    const { questionNumber, assertions } = this.state;\n    const four = 4;\n    if (questionNumber < four) {\n      const actNumber = questionNumber + 1;\n      this.setState({ questionNumber: actNumber,\n        isButtonVisible: false,\n        time: 30,\n        renderGame: true });\n      this.fetchApi();\n    } else if (questionNumber === four) {\n      return (alert(`Sua pontuação foi:${assertions}`));\n    }\n  }\n\n  render() {\n    const { incorrectAnswers, correct,\n      question, category, time, isDisabled, isButtonVisible } = this.state;\n      const innerHTML = (text) => ({\n        __html: text,\n      })\n    return (\n        (incorrectAnswers.length > 0) ? (\n        <div>\n          <section id=\"game\">\n            <h4 data-testid=\"question-category\">{ category }: </h4>\n            <h4 data-testid=\"question-text\" dangerouslySetInnerHTML={innerHTML(question)}>\n            </h4>\n            {incorrectAnswers.map((alternative, index) => {\n                if (alternative === correct) {\n                     return (<button\n                    type=\"button\"\n                    key={ correct }\n                    disabled={ isDisabled }\n                    id=\"correct-answer\"\n                    onClick={ () => {\n                      this.changeColor();\n                      this.score();\n                    } }\n                    className=\"correct\"\n                    dangerouslySetInnerHTML={innerHTML(correct)}\n                  >\n                  </button>)\n                } else if (alternative !== correct) {\n              return (<button\n                type=\"button\"\n                key={ alternative }\n                disabled={ isDisabled }\n                data-testid={ `wrong-answer-${index}` }\n                onClick={ this.changeColor }\n                className=\"wrong\"\n                dangerouslySetInnerHTML={innerHTML(alternative)}\n              >\n              </button>)}})}\n            { isButtonVisible\n            && (\n              <button data-testid=\"btn-next\" type=\"button\" onClick={ this.next }>\n                Próxima\n              </button>)}\n            { time }\n          </section>\n        </div>\n        ): <p id=\"load\">Loading</p>\n    );\n  }\n}\n\nexport default Game;",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":110,"column":56,"nodeType":"41","messageId":"42","endLine":110,"endColumn":58},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]